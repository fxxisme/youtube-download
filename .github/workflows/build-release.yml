name: Build and Release Windows Executable

# This workflow is triggered when a new tag starting with "v" is pushed.
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    # Use a Windows environment to build the .exe
    runs-on: windows-latest

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up the Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Step 3: Install project dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # Step 4: Download and set up FFmpeg for PyInstaller
    - name: Download and set up FFmpeg
      shell: pwsh
      run: |
        # Create the target directory structure that the pyinstaller command expects
        New-Item -Path "ffmpeg/bin" -ItemType Directory -Force
        
        # Download a static FFmpeg build from a reliable source
        $ffmpegUrl = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
        Invoke-WebRequest -Uri $ffmpegUrl -OutFile ffmpeg.zip
        
        # Extract the zip and move ffmpeg.exe to the correct location for bundling
        Expand-Archive -Path ffmpeg.zip -DestinationPath "ffmpeg_temp"
        Move-Item -Path "ffmpeg_temp/ffmpeg-master-latest-win64-gpl/bin/ffmpeg.exe" -Destination "ffmpeg/bin/ffmpeg.exe"
        
        # Clean up the downloaded zip and temporary folder
        Remove-Item ffmpeg.zip
        Remove-Item ffmpeg_temp -Recurse

    # Step 5: Build the executable using the corrected .spec file
    - name: Build with PyInstaller
      run: pyinstaller --noconfirm youtube_downloader.spec

    # Step 6: Package the build artifact into a zip file for easy download
    - name: Package release assets
      run: |
        $version = "${{ github.ref_name }}" # Get the version from the tag name (e.g., v1.0)
        $zipName = "youtube_downloader_${version}_windows.zip"
        Compress-Archive -Path dist/* -DestinationPath $zipName
        echo "ZIP_NAME=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # Step 7: Create the GitHub Release and upload the zipped artifact
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.ZIP_NAME }}